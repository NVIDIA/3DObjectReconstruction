[build-system]
requires = ["setuptools>=65.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "nvidia-3d-object-reconstruction"
version = "0.1.0"
description = "NVIDIA 3D Object Reconstruction Framework using BundleTrack and Neural Implicit Surfaces"
readme = "README.md"
license = {text = "NVIDIA License (Non-Commercial)"}
authors = [
    {name = "NVIDIA Corporation", email = "support@nvidia.com"}
]
maintainers = [
    {name = "NVIDIA Corporation", email = "support@nvidia.com"}
]
keywords = [
    "3D reconstruction",
    "neural implicit surfaces", 
    "bundle adjustment",
    "computer vision",
    "NVIDIA",
    "stereo vision",
    "depth estimation",
    "NeRF"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
]
requires-python = ">=3.8"
dependencies = [
    # Core ML/CV libraries
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy==1.26.4",
    "opencv-python>=4.5.0",
    "Pillow>=8.0.0",
    "imageio>=2.9.0",
    "scikit-image>=0.18.0",
    "scikit-learn>=1.0.0",
    
    # 3D processing
    "open3d>=0.15.0",
    "trimesh>=3.15.0",
    "pyrender>=0.1.45",
    
    # Configuration and data handling
    "omegaconf>=2.1.0",
    "pyyaml>=6.0",
    "tqdm>=4.60.0",
    "joblib>=1.1.0",
    
    # Utilities
    "typing-extensions>=4.0.0",
    "ipympl",
    
    # External models (these may need to be installed separately)
    # "foundation-stereo>=1.0.0",  # Custom package
    # "roma>=1.0.0",               # RoMa matcher
    # "sam2>=1.0.0",               # SAM2 segmentation
    "xformers"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0", 
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.17.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.0.0",
    "notebook>=6.4.0",
    "ipywidgets>=7.6.0",
]
viz = [
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "seaborn>=0.11.0",
]
all = [
    "nvidia-3d-object-reconstruction[dev,jupyter,viz]"
]

[project.urls]
Homepage = "https://github.com/NVIDIA/3DObjectReconstruction"
Documentation = "https://github.com/NVIDIA/3DObjectReconstruction"
Repository = "https://github.com/NVIDIA/3DObjectReconstruction.git"
Issues = "https://github.com/NVIDIA/3DObjectReconstruction/issues"
Changelog = "https://github.com/NVIDIA/3DObjectReconstruction/blob/main/CHANGELOG.md"

[project.scripts]
nvidia-3d-reconstruct = "nvidia.objectreconstruction.cli.main:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["nvidia*"]
namespaces = true

[tool.setuptools.package-data]
"nvidia.objectreconstruction" = [
    "configs/*.yaml",
    "configs/*.yml", 
    "data/*.txt",
    "*.md"
]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
] 